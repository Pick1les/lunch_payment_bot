import requests
import time
import json
import logging
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "8246985665:AAGpHgRVwU3t8vHGwE1bfRxrGGgeJWwyAKA"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –§–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
USER_DATA_FILE = "data/user_data.json"
REMINDERS_FILE = "data/reminders.json"

def load_data(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return {}

def save_data(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    url = f"{API_URL}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    try:
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"{API_URL}/getUpdates"
    params = {"timeout": 100, "offset": offset}
    try:
        response = requests.get(url, params=params, timeout=110)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: {e}")
        return {"ok": False, "result": []}

def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminders = load_data(REMINDERS_FILE)
        user_data = load_data(USER_DATA_FILE)
        current_time = datetime.now()
        
        reminders_to_remove = []
        
        for reminder_id, reminder in reminders.items():
            reminder_time = datetime.fromisoformat(reminder["time"])
            
            if current_time >= reminder_time:
                # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç–∞–ª–æ
                user_id = reminder["user_id"]
                if user_id in user_data and user_data[user_id].get("registered"):
                    send_message(
                        user_id, 
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['message']}\n"
                        f"üí≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–±–µ–¥!"
                    )
                    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                reminders_to_remove.append(reminder_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for reminder_id in reminders_to_remove:
            del reminders[reminder_id]
            save_data(REMINDERS_FILE, reminders)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    chat_id = str(message["chat"]["id"])
    text = message.get("text", "").lower()
    user = message["from"]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_data(USER_DATA_FILE)
    reminders = load_data(REMINDERS_FILE)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = str(user["id"])
    if user_id not in user_data:
        user_data[user_id] = {
            "first_name": user.get("first_name", ""),
            "username": user.get("username", ""),
            "last_interaction": datetime.now().isoformat(),
            "registered": False
        }
        logger.info(f"üìù –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', 'Unknown')}")
    
    user_data[user_id]["last_interaction"] = datetime.now().isoformat()
    save_data(USER_DATA_FILE, user_data)
    
    if text == "/start":
        send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –æ–±–µ–¥–æ–≤! ‚úÖ")
        send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    elif text == "/test":
        send_message(chat_id, f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!\nID: {user['id']}\n–ò–º—è: {user['first_name']}")
        
    elif text == "/help":
        help_text = """
üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/test - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/remindme - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        """
        send_message(chat_id, help_text)
    
    elif text == "/register":
        user_data[user_id]["registered"] = True
        save_data(USER_DATA_FILE, user_data)
        send_message(chat_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ.")
    
    elif text == "/stats":
        total_users = len(user_data)
        registered_users = sum(1 for u in user_data.values() if u.get("registered"))
        send_message(chat_id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered_users}")
    
    elif text == "/remindme":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∞)
        reminder_time = datetime.now() + timedelta(minutes=2)
        reminder_id = f"{user_id}_{datetime.now().timestamp()}"
        
        reminders[reminder_id] = {
            "user_id": user_id,
            "time": reminder_time.isoformat(),
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ"
        }
        save_data(REMINDERS_FILE, reminders)
        
        send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%H:%M')}")
    
    elif text:
        send_message(chat_id, "ü§ñ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    logger.info(f"üìû –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs("data", exist_ok=True)
    
    offset = None
    last_reminder_check = time.time()
    
    try:
        while True:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if current_time - last_reminder_check > 30:
                check_reminders()
                last_reminder_check = current_time
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            updates = get_updates(offset)
            
            if updates.get("ok"):
                for update in updates["result"]:
                    if "message" in update:
                        handle_message(update["message"])
                        offset = update["update_id"] + 1
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(0.5)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()