import requests
import time
import json
import os
import logging
from datetime import datetime
from typing import Dict, Any

from config import Config, config
from security import DataEncryptor
from utils import setup_logging, load_data, save_data, create_backup, get_bot_stats
from validation import validate_fio, sanitize_input, is_price_valid
from smart_sheet_parser import SmartSheetParser

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(config.LOG_FILE)
logger = logging.getLogger(__name__)

class LunchBot:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫
        self.encryptor = DataEncryptor(config.BOT_TOKEN)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.user_data = load_data(config.USER_DATA_FILE, self.encryptor)
        self.payments_data = load_data(config.PAYMENTS_FILE, self.encryptor)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        self.parser = SmartSheetParser(
            config.SPREADSHEET_ID,
            config.SHEET_NAME,
            config.SERVICE_ACCOUNT_KEY
        )
        
        self.offset = None
        
    def send_message(self, chat_id: int, text: str, reply_markup: Dict = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            sanitized_text = sanitize_input(text)
            data = {
                "chat_id": chat_id,
                "text": sanitized_text,
                "parse_mode": "Markdown"
            }
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            response = requests.post(f"{config.API_URL}/sendMessage", data=data, timeout=10)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def get_payment_message(self, amount: str = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏"""
        payment_text = (
            "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n\n"
            f"üè¶ –ë–∞–Ω–∫: {config.PAYMENT_DETAILS['bank']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{config.PAYMENT_DETAILS['phone']}`\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {config.PAYMENT_DETAILS['name']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {config.PAYMENT_DETAILS['comment']}"
        )
        if amount and amount != '0':
            payment_text += f"\nüíµ –°—É–º–º–∞: {amount} —Ä—É–±."
        payment_text += "\n\n‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É!"
        return payment_text

    def format_order_message(self, order: Dict, notification_type: str = "auto") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"""
        message = f"üçΩÔ∏è *–ó–∞–∫–∞–∑ –¥–ª—è {order['fio']}:*\n\n"
        
        components = [
            ("–ü–µ—Ä–≤–æ–µ", order['first_dish']),
            ("–í—Ç–æ—Ä–æ–µ", order['second_dish']),
            ("–ì–∞—Ä–Ω–∏—Ä", order['garnish']),
            ("–°–∞–ª–∞—Ç", order['salad']),
            ("–°–æ—É—Å", order['sauce']),
            ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", order['comment'])
        ]
        
        for name, value in components:
            if value:
                message += f"‚Ä¢ *{name}:* {value}\n"
        
        message += f"\nüíµ *–°—É–º–º–∞: {order['price']} —Ä—É–±.*\n"
        
        if notification_type == "reminder":
            message += "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ 14:00\n\n"
        elif notification_type == "urgent":
            message += "‚ö†Ô∏è *–°–†–û–ß–ù–û:* –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 14:00!\n\n"
        else:
            message += "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ 14:00\n\n"
        
        return message

    def create_payment_keyboard(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        return {
            "inline_keyboard": [[
                {
                    "text": "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)",
                    "callback_data": "payment_confirmed"
                }
            ]]
        }

    def create_admin_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return {
            "keyboard": [
                ["/stats", "/users"],
                ["/broadcast", "/backup"],
                ["/check_orders", "/notify_admin"],
                ["/main_menu"]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }

    def create_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        return {
            "keyboard": [
                ["/start", "/register"],
                ["/payment", "/checkorders"],
                ["/mystatus"]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }

    def get_welcome_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±–µ–¥–æ–≤!*\n\n"
            "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
            "üìç */start* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "üìç */register* - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "üìç */payment* - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
            "üìç */checkorders* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "üìç */mystatus* - –º–æ–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã\n\n"
            "‚ö° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register\n"
            "2. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –§–ò–û –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ\n"
            "3. –ü–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö\n"
            "4. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç–µ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\"\n\n"
            "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã"
        )

    def should_send_notification(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        current_time = now.time()
        
        start_time = datetime.strptime(config.NOTIFICATION_SETTINGS['start_time'], "%H:%M").time()
        end_time = datetime.strptime(config.NOTIFICATION_SETTINGS['end_time'], "%H:%M").time()
        
        return start_time <= current_time <= end_time

    def get_current_notification_type(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()
        current_time_str = now.strftime("%H:%M")
        
        if current_time_str == "11:30":
            return "reminder"
        elif current_time_str == "13:00":
            return "urgent"
        else:
            return "auto"

    def check_orders_and_notify(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not self.should_send_notification():
                logger.info("‚è∞ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return
                
            orders = self.parser.get_todays_orders()
            notified_count = 0
            
            for order in orders:
                if order['has_order'] and is_price_valid(order['price']):
                    today = datetime.now().strftime("%Y-%m-%d")
                    order_key = f"{order['fio']}_{today}"
                    
                    # –ü–†–û–í–ï–†–ö–ê 1: –ï–°–õ–ò –£–ñ–ï –û–ü–õ–ê–ß–ï–ù–û - –ü–†–û–ü–£–°–ö–ê–ï–ú –î–õ–Ø –í–°–ï–• –¢–ò–ü–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
                    if order_key in self.payments_data and self.payments_data[order_key].get('paid'):
                        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω: {order['fio']}")
                        continue
                    
                    notification_type = self.get_current_notification_type()
                    
                    # –ü–†–û–í–ï–†–ö–ê 2: –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
                    if notification_type in ["reminder", "urgent"]:
                        # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –≠–¢–û–¢ –¢–ò–ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        if order_key in self.payments_data and self.payments_data[order_key].get('last_notification_type') == notification_type:
                            logger.info(f"‚ö†Ô∏è –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ {notification_type} –¥–ª—è {order['fio']}")
                            continue
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–æ–µ-–ª–∏–±–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if order_key in self.payments_data:
                            logger.info(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['fio']}")
                            continue
                    
                    for user_id, user_info in self.user_data.items():
                        if (user_info.get('registered') and user_info.get('fio') and 
                            user_info['fio'].lower() == order['fio'].lower()):
                            
                            message = self.format_order_message(order, notification_type)
                            message += self.get_payment_message(order['price'])
                            
                            if self.send_message(user_id, message, self.create_payment_keyboard()):
                                if order_key not in self.payments_data:
                                    self.payments_data[order_key] = {
                                        "user_id": user_id,
                                        "fio": order['fio'],
                                        "amount": order['price'],
                                        "date": today,
                                        "paid": False,
                                        "notifications_sent": 0
                                    }
                                
                                self.payments_data[order_key]['last_notification_type'] = notification_type
                                self.payments_data[order_key]['last_notification_time'] = datetime.now().isoformat()
                                self.payments_data[order_key]['notifications_sent'] += 1
                                
                                notified_count += 1
                                logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω {notification_type} –¥–ª—è {order['fio']} - {order['price']} —Ä—É–±.")
                            break
            
            save_data(config.PAYMENTS_FILE, self.payments_data, self.encryptor)
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {notified_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

    def handle_callback_query(self, update: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã"""
        try:
            query = update['callback_query']
            user_id = str(query['from']['id'])
            message = query['message']
            chat_id = message['chat']['id']
            message_id = message['message_id']
            
            if query['data'] == 'payment_confirmed':
                today = datetime.now().strftime("%Y-%m-%d")
                user_info = self.user_data.get(user_id, {})
                user_fio = user_info.get('fio', '')
                
                if user_fio:
                    order_key = f"{user_fio}_{today}"
                    if order_key in self.payments_data:
                        self.payments_data[order_key]['paid'] = True
                        self.payments_data[order_key]['paid_at'] = datetime.now().isoformat()
                        save_data(config.PAYMENTS_FILE, self.payments_data, self.encryptor)
                        
                        requests.post(f"{config.API_URL}/answerCallbackQuery", 
                                    data={"callback_query_id": query['id']})
                        
                        edit_text = message['text'] + "\n\n‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*"
                        requests.post(f"{config.API_URL}/editMessageText", 
                                    data={
                                        "chat_id": chat_id,
                                        "message_id": message_id,
                                        "text": edit_text,
                                        "parse_mode": "Markdown"
                                    })
                        
                        logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: {user_fio}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

    def handle_stats_command(self, chat_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = get_bot_stats(self.user_data, self.payments_data)
            
            message = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['registered_users']}\n"
                f"üìù –° –§–ò–û: {stats['users_with_fio']}\n\n"
                f"üçΩÔ∏è –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_orders']}\n"
                f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['today_paid']}\n\n"
                f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
                f"üí∞ –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: {stats['total_paid']}\n\n"
                f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            self.send_message(chat_id, message)
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def handle_users_command(self, chat_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not self.user_data:
                self.send_message(chat_id, "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
                return
                
            message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
            for i, (user_id, user_info) in enumerate(list(self.user_data.items())[:50], 1):
                status = "‚úÖ" if user_info.get('registered') else "‚ùå"
                fio = user_info.get('fio', '–Ω–µ—Ç –§–ò–û')
                username = user_info.get('username', '–Ω–µ—Ç username')
                message += f"{i}. {status} {fio} (@{username})\n"
                
            if len(self.user_data) > 50:
                message += f"\n... –∏ –µ—â–µ {len(self.user_data) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
            self.send_message(chat_id, message)
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def handle_broadcast_message(self, chat_id: int, message_text: str, admin_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            success_count = 0
            fail_count = 0
            
            for user_id, user_info in self.user_data.items():
                if user_id != admin_id and user_info.get('registered'):
                    if self.send_message(user_id, f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}"):
                        success_count += 1
                    else:
                        fail_count += 1
                    time.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            
            report = (
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {fail_count}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_data)}"
            )
            
            self.send_message(chat_id, report)
            self.user_data[admin_id]["step"] = None
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            self.user_data[admin_id]["step"] = None

    def handle_backup_command(self, chat_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É backup"""
        try:
            success, message = create_backup(self.encryptor)
            self.send_message(chat_id, message)
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")

    def handle_check_orders_command(self, chat_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            self.send_message(chat_id, "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
            self.check_orders_and_notify()
            self.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    def handle_notify_admin_command(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
        try:
            admin_count = 0
            admin_names = []
            
            for user_id in self.user_data:
                if int(user_id) in config.ADMIN_USER_IDS:
                    user_info = self.user_data[user_id]
                    name = user_info.get('first_name', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                    username = user_info.get('username', '')
                    
                    if self.send_message(user_id, f"üëë *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"):
                        admin_count += 1
                        admin_names.append(f"{name} (@{username})" if username else name)
            
            report = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {admin_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:\n"
            for name in admin_names:
                report += f"‚Ä¢ {name}\n"
            
            self.send_message(chat_id, report)
        except Exception as e:
            self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    def send_admin_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            stats = get_bot_stats(self.user_data, self.payments_data)
            today = datetime.now().strftime("%Y-%m-%d")
            
            message = (
                "üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
                f"üìÖ –î–∞—Ç–∞: {today}\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['registered_users']}\n"
                f"üçΩÔ∏è –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['today_orders']}\n"
                f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['today_paid']}\n\n"
                f"üí∞ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {stats['today_orders'] - stats['today_paid']}\n"
                f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            for user_id in self.user_data:
                if int(user_id) in config.ADMIN_USER_IDS:
                    self.send_message(user_id, message)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    def handle_message(self, update: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = update["message"]
        chat_id = str(message["chat"]["id"])
        text = message.get("text", "").strip()
        user = message["from"]
        
        user_id = str(user["id"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        is_admin = int(user_id) in config.ADMIN_USER_IDS
        
        if user_id not in self.user_data:
            self.user_data[user_id] = {
                "first_name": user.get("first_name", ""),
                "username": user.get("username", ""),
                "registered": False,
                "fio": "",
                "step": "start"
            }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –≤—Å–µ—Ö
        if text == "/start":
            if is_admin:
                self.send_message(chat_id, "üëë *–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*", self.create_admin_keyboard())
            else:
                self.send_message(chat_id, "üìã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", self.create_main_keyboard())
            self.send_message(chat_id, self.get_welcome_message())
            save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /main_menu –¥–ª—è –≤—Å–µ—Ö
        elif text == "/main_menu":
            self.send_message(chat_id, "üìã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", self.create_main_keyboard())
            save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ waiting_fio –¥–ª—è –≤—Å–µ—Ö
        elif self.user_data[user_id].get("step") == "waiting_fio":
            cleaned_fio = validate_fio(text)
            if cleaned_fio:
                self.user_data[user_id]["fio"] = cleaned_fio
                self.user_data[user_id]["step"] = "completed"
                self.send_message(chat_id, f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cleaned_fio}")
                self.send_message(chat_id, "üì© –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö!")
            else:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ waiting_broadcast —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        elif self.user_data[user_id].get("step") == "waiting_broadcast":
            if is_admin:
                self.handle_broadcast_message(chat_id, text, user_id)
            else:
                self.user_data[user_id]["step"] = None
            save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
            return
        
        # –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        if is_admin:
            admin_commands_processed = False
            
            if text == "/stats":
                self.handle_stats_command(chat_id)
                admin_commands_processed = True
                
            elif text == "/users":
                self.handle_users_command(chat_id)
                admin_commands_processed = True
                
            elif text == "/broadcast":
                self.user_data[user_id]["step"] = "waiting_broadcast"
                self.send_message(chat_id, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
                admin_commands_processed = True
                
            elif text == "/backup":
                self.handle_backup_command(chat_id)
                admin_commands_processed = True
                
            elif text == "/check_orders":
                self.handle_check_orders_command(chat_id)
                admin_commands_processed = True
                
            elif text == "/notify_admin":
                self.handle_notify_admin_command(chat_id)
                admin_commands_processed = True
            
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–∏–º
            if admin_commands_processed:
                save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
                return
        
        # –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–¥–ª—è –≤—Å–µ—Ö, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        if text == "/register":
            self.user_data[user_id]["registered"] = True
            self.user_data[user_id]["step"] = "waiting_fio"
            self.send_message(chat_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤:")
            
        elif text == "/checkorders":
            if self.parser.worksheet:
                orders = self.parser.get_todays_orders()
                active_orders = [o for o in orders if o['has_order'] and is_price_valid(o['price'])]
                
                if active_orders:
                    self.send_message(chat_id, f"üìä –í—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(active_orders)}")
                    
                    total_amount = 0.0
                    for order in active_orders:
                        order_info = f"üë§ {order['fio']} - {order['price']} —Ä—É–±.\n"
                        
                        if order.get('first_dish'):
                            order_info += f"ü•£ –ü–µ—Ä–≤–æ–µ: {order['first_dish']}\n"
                        if order.get('second_dish'):
                            order_info += f"üçñ –í—Ç–æ—Ä–æ–µ: {order['second_dish']}\n"
                        if order.get('garnish'):
                            order_info += f"üçö –ì–∞—Ä–Ω–∏—Ä: {order['garnish']}\n"
                        if order.get('salad'):
                            order_info += f"ü•ó –°–∞–ª–∞—Ç: {order['salad']}\n"
                        if order.get('comment'):
                            order_info += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n"
                        
                        self.send_message(chat_id, order_info)
                        
                        try:
                            price = float(order['price'].replace(',', '.'))
                            total_amount += price
                        except (ValueError, TypeError):
                            pass
                    
                    self.send_message(chat_id, f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: {total_amount:.2f} —Ä—É–±.*")
                    
                else:
                    self.send_message(chat_id, "üìä –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
            else:
                self.send_message(chat_id, "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
        elif text == "/payment":
            self.send_message(chat_id, self.get_payment_message())
            
        elif text == "/mystatus":
            user_info = self.user_data.get(user_id, {})
            if user_info.get('fio'):
                today = datetime.now().strftime("%Y-%m-%d")
                order_key = f"{user_info['fio']}_{today}"
                
                # –ü–†–û–í–ï–†–Ø–ï–ú –°–ù–ê–ß–ê–õ–ê –ó–ê–ö–ê–ó–´ –ò–ó –¢–ê–ë–õ–ò–¶–´
                orders = self.parser.get_todays_orders()
                user_has_order = any(order['fio'].lower() == user_info['fio'].lower() 
                                   for order in orders if order['has_order'])
                
                if not user_has_order:
                    self.send_message(chat_id, "üìä –ó–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
                    return
                    
                # –ï–°–¢–¨ –ó–ê–ö–ê–ó - –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´
                if order_key in self.payments_data:
                    status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if self.payments_data[order_key]['paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                    amount = self.payments_data[order_key]['amount']
                    notifications = self.payments_data[order_key].get('notifications_sent', 0)
                    self.send_message(chat_id, f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\nüíµ –°—É–º–º–∞: {amount} —Ä—É–±.\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications}")
                else:
                    # –ó–ê–ö–ê–ó –ï–°–¢–¨, –ù–û –û–ü–õ–ê–¢–ê –ï–©–ï –ù–ï –û–ë–†–ê–ë–û–¢–ê–ù–ê
                    order_info = next((order for order in orders 
                                     if order['fio'].lower() == user_info['fio'].lower() 
                                     and order['has_order']), None)
                    if order_info:
                        self.send_message(chat_id, 
                            f"üìä –ó–∞–∫–∞–∑ –µ—Å—Ç—å!\n"
                            f"üíµ –°—É–º–º–∞: {order_info['price']} —Ä—É–±.\n"
                            f"üìù –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
                            f"üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /payment –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")
            else:
                self.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /register")
            
        else:
            self.send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {config.NOTIFICATION_SETTINGS['start_time']}-{config.NOTIFICATION_SETTINGS['end_time']}")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.ADMIN_USER_IDS}")
        
        last_check = time.time()
        last_reminder_check = time.time()
        last_admin_notification = time.time()
        last_backup = time.time()
        
        try:
            while True:
                current_time = time.time()
                current_time_str = datetime.now().strftime("%H:%M")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if current_time - last_check > config.NOTIFICATION_SETTINGS['check_interval']:
                    self.check_orders_and_notify()
                    last_check = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if current_time - last_reminder_check > 60:
                    if current_time_str in config.NOTIFICATION_SETTINGS['reminder_times']:
                        logger.info(f"üîî –í—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_time_str}")
                        self.check_orders_and_notify()
                    last_reminder_check = current_time
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                if current_time - last_admin_notification > 3600:
                    if current_time_str == config.ADMIN_NOTIFICATION_TIME:
                        self.send_admin_daily_report()
                        last_admin_notification = current_time
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π backup
                if current_time - last_backup > 3600:
                    if current_time_str == config.BACKUP_TIME:
                        success, message = create_backup(self.encryptor)
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup: {message}")
                        last_backup = current_time
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    response = requests.get(f"{config.API_URL}/getUpdates", 
                                        params={"timeout": 100, "offset": self.offset}).json()
                    
                    if response.get("ok"):
                        for update in response["result"]:
                            if "callback_query" in update:
                                self.handle_callback_query(update)
                                self.offset = update['update_id'] + 1
                            
                            elif "message" in update:
                                self.handle_message(update)
                                self.offset = update['update_id'] + 1
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            save_data(config.USER_DATA_FILE, self.user_data, self.encryptor)
            save_data(config.PAYMENTS_FILE, self.payments_data, self.encryptor)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = LunchBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()