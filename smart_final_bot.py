import requests
import time
import json
import os
import gspread
import re
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8246985665:AAGpHgRVwU3t8vHGwE1bfRxrGGgeJWwyAKA"
SPREADSHEET_ID = "1B_u7XNX-tWurpxrHgQdJuFWWTwP3KW8kX7_VyuQzJwY"
SHEET_NAME = "–ú–µ–Ω—é"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_SETTINGS = {
    'start_time': "10:20",
    'end_time': "14:00",
    'reminder_times': ["11:30", "13:00"],  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    'check_interval': 300  # 5 –º–∏–Ω—É—Ç
}

# –†–µ–∫–≤–∏–∑–∏—Ç—ã
PAYMENT_DETAILS = {
    "bank": "–°–±–µ—Ä–±–∞–Ω–∫",
    "phone": "+79604431441", 
    "name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á –ï.",
    "comment": "–û–ø–ª–∞—Ç–∞ –æ–±–µ–¥–∞"
}

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USER_DATA_FILE = "user_data.json"
PAYMENTS_FILE = "payments.json"

class SmartSheetParser:
    def __init__(self):
        self.worksheet = None
        self.fio_column = 1
        self.setup_google_sheets()
        
    def setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            creds = Credentials.from_service_account_file("credentials/service_account_key.json", 
                        scopes=["https://www.googleapis.com/auth/spreadsheets"])
            gc = gspread.authorize(creds)
            self.worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def parse_order_row(self, row):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞"""
        if len(row) <= self.fio_column:
            return None
            
        fio = row[self.fio_column].strip()
        if not fio or fio.lower() in ['—Ñ–∏–æ', '—Ñ–∞–º', '–∏–º—è', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '']:
            return None
        
        order_data = {
            'fio': fio,
            'first_dish': '',
            'second_dish': '',
            'garnish': '',
            'salad': '',
            'sauce': '',
            'comment': '',
            'price': '0'
        }
        
        for col_idx, cell in enumerate(row):
            if col_idx == self.fio_column:
                continue
                
            cell_value = cell.strip()
            if not cell_value:
                continue
                
            # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
            price_match = re.search(r'(\d+[\d,.]*)', cell_value)
            if price_match:
                order_data['price'] = price_match.group(1)
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —è—á–µ–π–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            if col_idx == 2:
                order_data['first_dish'] = cell_value
            elif col_idx == 3:
                order_data['second_dish'] = cell_value
            elif col_idx == 4:
                order_data['garnish'] = cell_value
            elif col_idx == 5:
                order_data['salad'] = cell_value
            elif col_idx == 6:
                order_data['sauce'] = cell_value
            elif col_idx == 7:
                order_data['comment'] = cell_value
        
        return order_data

    def get_todays_orders(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã"""
        if not self.worksheet:
            return []
            
        try:
            all_data = self.worksheet.get_all_values()
            if not all_data or len(all_data) < 3:
                return []
            
            orders_dict = {}
            
            for row in all_data[3:]:
                order_data = self.parse_order_row(row)
                if not order_data:
                    continue
                
                fio = order_data['fio']
                
                if fio in orders_dict:
                    existing_order = orders_dict[fio]
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª—é–¥–∞
                    for key in ['first_dish', 'second_dish', 'garnish', 'salad', 'sauce']:
                        if order_data[key] and not existing_order[key]:
                            existing_order[key] = order_data[key]
                        elif order_data[key] and existing_order[key]:
                            existing_order[key] += f", {order_data[key]}"
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    if order_data['comment']:
                        if existing_order['comment']:
                            existing_order['comment'] += f"; {order_data['comment']}"
                        else:
                            existing_order['comment'] = order_data['comment']
                    
                    # –°—É–º–º–∏—Ä—É–µ–º —Ü–µ–Ω—ã
                    try:
                        existing_price = float(existing_order['price'].replace(',', '.'))
                        new_price = float(order_data['price'].replace(',', '.'))
                        existing_order['price'] = str(round(existing_price + new_price, 2))
                    except:
                        pass
                else:
                    orders_dict[fio] = order_data
            
            orders = list(orders_dict.values())
            valid_orders = []
            
            for order in orders:
                has_dishes = any(order[key] for key in ['first_dish', 'second_dish', 'garnish', 'salad', 'sauce'])
                if has_dishes:
                    order['has_order'] = True
                    valid_orders.append(order)
                    print(f"üì¶ –ó–∞–∫–∞–∑: {order['fio']} - {order['price']} —Ä—É–±.")
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(valid_orders)}")
            return valid_orders
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []

def load_data(filename):
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except:
        return {}

def save_data(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except:
        pass

def send_message(chat_id, text, reply_markup=None):
    try:
        data = {"chat_id": chat_id, "text": text}
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        requests.post(f"{API_URL}/sendMessage", data=data, timeout=10)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_payment_message(amount=None):
    payment_text = (
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n\n"
        f"üè¶ –ë–∞–Ω–∫: {PAYMENT_DETAILS['bank']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{PAYMENT_DETAILS['phone']}`\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {PAYMENT_DETAILS['name']}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {PAYMENT_DETAILS['comment']}"
    )
    if amount and amount != '0':
        payment_text += f"\nüíµ –°—É–º–º–∞: {amount} —Ä—É–±."
    payment_text += "\n\n‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É!"
    return payment_text

def format_order_message(order, notification_type="auto"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    message = f"üçΩÔ∏è *–ó–∞–∫–∞–∑ –¥–ª—è {order['fio']}:*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    components = [
        ("–ü–µ—Ä–≤–æ–µ", order['first_dish']),
        ("–í—Ç–æ—Ä–æ–µ", order['second_dish']),
        ("–ì–∞—Ä–Ω–∏—Ä", order['garnish']),
        ("–°–∞–ª–∞—Ç", order['salad']),
        ("–°–æ—É—Å", order['sauce']),
        ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", order['comment'])
    ]
    
    for name, value in components:
        if value:
            message += f"‚Ä¢ *{name}:* {value}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É
    message += f"\nüíµ *–°—É–º–º–∞: {order['price']} —Ä—É–±.*\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_type == "reminder":
        message += "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ 14:00\n\n"
    elif notification_type == "urgent":
        message += "‚ö†Ô∏è *–°–†–û–ß–ù–û:* –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 14:00!\n\n"
    else:
        message += "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ 14:00\n\n"
    
    return message

def create_payment_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    return {
        "inline_keyboard": [[
            {
                "text": "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)",
                "callback_data": "payment_confirmed"
            }
        ]]
    }

def get_welcome_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""
    return (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±–µ–¥–æ–≤!*\n\n"
        "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "üìç */start* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üìç */register* - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "üìç */payment* - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç–∞\n"
        "üìç */checkorders* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "üìç */mystatus* - –º–æ–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã\n\n"
        "‚ö° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register\n"
        "2. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –§–ò–û –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ\n"
        "3. –ü–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö\n"
        "4. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç–µ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\"\n\n"
        "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã"
    )

def should_send_notification():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    now = datetime.now()
    current_time = now.time()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É 10:20 –∏ 14:00
    start_time = datetime.strptime("10:20", "%H:%M").time()
    end_time = datetime.strptime("14:00", "%H:%M").time()
    
    return start_time <= current_time <= end_time

def is_price_valid(price_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ü–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞"""
    if not price_str:
        return False
        
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        price = float(price_str.replace(',', '.'))
        # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0
        return price > 0
    except (ValueError, TypeError):
        return False

def get_current_notification_type():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è based on current time"""
    now = datetime.now()
    current_time_str = now.strftime("%H:%M")
    
    if current_time_str == "11:30":
        return "reminder"
    elif current_time_str == "13:00":
        return "urgent"
    else:
        return "auto"

def check_orders_and_notify(parser, user_data, payments_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞"""
    try:
        now = datetime.now()
        current_time_str = now.strftime("%H:%M:%S")
        notification_type = get_current_notification_type()
        
        print(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤: {current_time_str}, —Ç–∏–ø: {notification_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not should_send_notification():
            print("‚è∞ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
            
        orders = parser.get_todays_orders()
        notified_count = 0
        
        for order in orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò —Ü–µ–Ω–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞
            if (order['has_order'] and is_price_valid(order['price'])):
                
                today = datetime.now().strftime("%Y-%m-%d")
                order_key = f"{order['fio']}_{today}"
                
                if order_key in payments_data and payments_data[order_key].get('paid'):
                    print(f"‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {order['fio']}")
                    continue
                
                # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏–ø
                if notification_type in ["reminder", "urgent"]:
                    if order_key in payments_data and payments_data[order_key].get('last_notification_type') == notification_type:
                        print(f"‚ö†Ô∏è –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ {notification_type} –¥–ª—è {order['fio']}")
                        continue
                
                # –î–ª—è –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                elif order_key in payments_data:
                    print(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['fio']}")
                    continue
                
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
                for user_id, user_info in user_data.items():
                    if (user_info.get('registered') and 
                        user_info.get('fio') and 
                        user_info['fio'].lower() == order['fio'].lower()):
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
                        message = format_order_message(order, notification_type)
                        message += get_payment_message(order['price'])
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        send_message(user_id, message, create_payment_keyboard())
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        if order_key not in payments_data:
                            payments_data[order_key] = {
                                "user_id": user_id,
                                "fio": order['fio'],
                                "amount": order['price'],
                                "date": today,
                                "paid": False,
                                "notifications_sent": 0
                            }
                        
                        payments_data[order_key]['last_notification_type'] = notification_type
                        payments_data[order_key]['last_notification_time'] = now.isoformat()
                        payments_data[order_key]['notifications_sent'] += 1
                        
                        notified_count += 1
                        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω {notification_type} –¥–ª—è {order['fio']} - {order['price']} —Ä—É–±.")
                        break
            
            elif order['has_order'] and (not is_price_valid(order['price'])):
                print(f"‚è≥ –ó–∞–∫–∞–∑ –±–µ–∑ —Ü–µ–Ω—ã: {order['fio']} - –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
        
        save_data(PAYMENTS_FILE, payments_data)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {notified_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

def handle_callback_query(update, user_data, payments_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        query = update['callback_query']
        user_id = str(query['from']['id'])
        message = query['message']
        chat_id = message['chat']['id']
        message_id = message['message_id']
        
        if query['data'] == 'payment_confirmed':
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
            today = datetime.now().strftime("%Y-%m-%d")
            user_info = user_data.get(user_id, {})
            user_fio = user_info.get('fio', '')
            
            if user_fio:
                order_key = f"{user_fio}_{today}"
                if order_key in payments_data:
                    payments_data[order_key]['paid'] = True
                    payments_data[order_key]['paid_at'] = datetime.now().isoformat()
                    save_data(PAYMENTS_FILE, payments_data)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    requests.post(f"{API_URL}/answerCallbackQuery", 
                                data={"callback_query_id": query['id']})
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    edit_text = message['text'] + "\n\n‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*"
                    requests.post(f"{API_URL}/editMessageText", 
                                data={
                                    "chat_id": chat_id,
                                    "message_id": message_id,
                                    "text": edit_text,
                                    "parse_mode": "Markdown"
                                })
                    
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: {user_fio}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

def main():
    print("üöÄ –£–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –° —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    print(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {NOTIFICATION_SETTINGS['start_time']}-{NOTIFICATION_SETTINGS['end_time']}")
    print(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤: {', '.join(NOTIFICATION_SETTINGS['reminder_times'])}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = SmartSheetParser()
    user_data = load_data(USER_DATA_FILE)
    payments_data = load_data(PAYMENTS_FILE)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(USER_DATA_FILE):
        save_data(USER_DATA_FILE, {})
    if not os.path.exists(PAYMENTS_FILE):
        save_data(PAYMENTS_FILE, {})
    
    offset = None
    last_check = time.time()
    last_reminder_check = time.time()
    
    try:
        while True:
            current_time = time.time()
            now = datetime.now()
            current_time_str = now.strftime("%H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_check > NOTIFICATION_SETTINGS['check_interval'] and parser.worksheet:
                check_orders_and_notify(parser, user_data, payments_data)
                last_check = current_time
            
            # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if current_time - last_reminder_check > 60:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if current_time_str in NOTIFICATION_SETTINGS['reminder_times']:
                    print(f"üîî –í—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {current_time_str}")
                    check_orders_and_notify(parser, user_data, payments_data)
                last_reminder_check = current_time
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–æ–≤
            response = requests.get(f"{API_URL}/getUpdates", 
                                params={"timeout": 100, "offset": offset}).json()
            
            if response.get("ok"):
                for update in response["result"]:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
                    if "callback_query" in update:
                        handle_callback_query(update, user_data, payments_data)
                        offset = update['update_id'] + 1
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    elif "message" in update:
                        message = update["message"]
                        chat_id = str(message["chat"]["id"])
                        text = message.get("text", "").strip()
                        user = message["from"]
                        
                        user_id = str(user["id"])
                        
                        if user_id not in user_data:
                            user_data[user_id] = {
                                "first_name": user.get("first_name", ""),
                                "username": user.get("username", ""),
                                "registered": False,
                                "fio": "",
                                "step": "start"
                            }
                        
                        if text == "/start":
                            send_message(chat_id, get_welcome_message())
                            
                        elif text == "/register":
                            user_data[user_id]["registered"] = True
                            user_data[user_id]["step"] = "waiting_fio"
                            send_message(chat_id, "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤:")
                            
                        elif text == "/checkorders":
                            if parser.worksheet:
                                orders = parser.get_todays_orders()
                                active_orders = [o for o in orders if o['has_order'] and is_price_valid(o['price'])]
                                total_orders = len(orders)
                                
                                if active_orders:
                                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                    send_message(chat_id, f"üìä –í—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(active_orders)}/{total_orders}")
                                    
                                    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                                    for order in active_orders:
                                        order_info = f"üë§ {order['fio']} - {order['price']} —Ä—É–±.\n"
                                        
                                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–∞—Ö
                                        if order.get('first_dish'):
                                            order_info += f"ü•£ –ü–µ—Ä–≤–æ–µ: {order['first_dish']}\n"
                                        if order.get('second_dish'):
                                            order_info += f"üçñ –í—Ç–æ—Ä–æ–µ: {order['second_dish']}\n"
                                        if order.get('garnish'):
                                            order_info += f"üçö –ì–∞—Ä–Ω–∏—Ä: {order['garnish']}\n"
                                        if order.get('salad'):
                                            order_info += f"ü•ó –°–∞–ª–∞—Ç: {order['salad']}\n"
                                        if order.get('comment'):
                                            order_info += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n"
                                        
                                        send_message(chat_id, order_info)
                                        
                                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                                        time.sleep(0.5)
                                else:
                                    send_message(chat_id, "üìä –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
                            else:
                                send_message(chat_id, "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                            
                        elif text == "/payment":
                            send_message(chat_id, get_payment_message())
                            
                        elif text == "/mystatus":
                            user_info = user_data.get(user_id, {})
                            if user_info.get('fio'):
                                today = datetime.now().strftime("%Y-%m-%d")
                                order_key = f"{user_info['fio']}_{today}"
                                if order_key in payments_data:
                                    status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if payments_data[order_key]['paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                                    amount = payments_data[order_key]['amount']
                                    notifications = payments_data[order_key].get('notifications_sent', 0)
                                    send_message(chat_id, f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\nüíµ –°—É–º–º–∞: {amount} —Ä—É–±.\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications}")
                                else:
                                    send_message(chat_id, "üìä –ó–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
                            else:
                                send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å /register")
                            
                        elif user_data[user_id].get("step") == "waiting_fio":
                            user_data[user_id]["fio"] = text
                            user_data[user_id]["step"] = "completed"
                            send_message(chat_id, f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}")
                            send_message(chat_id, "üì© –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö!")
                            
                        else:
                            send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
                        
                        offset = update['update_id'] + 1
                        save_data(USER_DATA_FILE, user_data)
            
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()